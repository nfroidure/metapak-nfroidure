import { describe, beforeEach, jest, test, expect } from '@jest/globals';
import assetsTransformer from './assets.js';
import { constants } from 'fs';
import type { LogService, FSService } from 'metapak';

const ASSETS_README_CONTENTS = `[//]: # ( )
[//]: # (This file is automatically generated by a \`metapak\`)
[//]: # (module. Do not change it except between the)
[//]: # (\`content:start/end\` flags, your changes would)
[//]: # (be overridden.)
[//]: # ( )
`;
const PROJECT_README_CONTENTS = `[//]: # ( )
[//]: # (This file is automatically generated by a \`metapak\`)
[//]: # (module. Do not change it except between the)
[//]: # (\`content:start/end\` flags, your changes would)
[//]: # (be overridden.)
[//]: # ( )
# module
> A great module!

[![NPM version](https://badge.fury.io/js/module.svg)](https://npmjs.org/package/module)
[![Dependency Status](https://david-dm.org/nfroidure/module.svg)](https://david-dm.org/nfroidure/module)
[![devDependency Status](https://david-dm.org/nfroidure/module/dev-status.svg)](https://david-dm.org/nfroidure/module#info=devDependencies)
[![Dependency Status](https://dependencyci.com/github/nfroidure/module/badge)](https://dependencyci.com/github/nfroidure/module)


[//]: # (::contents:start)

## Usage

Just require me


[//]: # (::contents:end)


# API
\`\`\`
toto.lol()
\`\`\`

# License
[MIT](https://github.com/nfroidure/module/blob/master/LICENSE)
`;
const PROJECT_API_CONTENTS = `
# API
\`\`\`
toto.lol()
\`\`\`
`;

describe('Assets transformer for www configs', () => {
  const fs = {
    readFileAsync: jest.fn<FSService['readFileAsync']>(),
    writeFileAsync: jest.fn<FSService['writeFileAsync']>(),
    mkdirpAsync: jest.fn<FSService['mkdirpAsync']>(),
    accessAsync: jest.fn<FSService['accessAsync']>(),
    readdirAsync: jest.fn<FSService['readdirAsync']>(),
    unlinkAsync: jest.fn<FSService['unlinkAsync']>(),
    constants,
  };
  const PROJECT_DIR = '/lol/';
  const log = jest.fn<LogService>();

  beforeEach(() => {
    fs.readFileAsync.mockReset();
    fs.writeFileAsync.mockReset();
    fs.mkdirpAsync.mockReset();
    fs.accessAsync.mockReset();
    fs.readdirAsync.mockReset();
    fs.unlinkAsync.mockReset();
    log.mockReset();
  });

  test('should build the README.md file', async () => {
    fs.readFileAsync.mockResolvedValueOnce(
      Buffer.from(PROJECT_README_CONTENTS),
    );
    fs.readFileAsync.mockResolvedValueOnce(Buffer.from(PROJECT_API_CONTENTS));

    const file = await assetsTransformer(
      {
        name: 'README.md',
        dir: '/home/whoami/project/dir',
        data: ASSETS_README_CONTENTS,
      },
      {
        name: 'module',
        description: 'A great module!',
        metapak: {
          configs: ['readme'],
          data: {},
        },
        devDependencies: {},
        author: {
          name: 'Nicolas Froidure',
          email: 'nicolas.froidure@insertafter.com',
          url: 'http://insertafter.com/en/index.html',
        },
        contributors: [
          {
            name: 'John Doe',
          },
        ],
        license: 'MIT',
      },
      {
        PROJECT_DIR,
        fs,
        log,
      },
    );

    expect(file).toMatchInlineSnapshot(`
{
  "data": "[//]: # ( )
[//]: # (This file is automatically generated by a \`metapak\`)
[//]: # (module. Do not change it except between the)
[//]: # (\`content:start/end\` flags, your changes would)
[//]: # (be overridden.)
[//]: # ( )
# module
> A great module!

[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/nfroidure/module/blob/main/LICENSE)


[//]: # (::contents:start)

## Usage

Just require me


[//]: # (::contents:end)


# API
\`\`\`
toto.lol()
\`\`\`

# Authors
- [Nicolas Froidure](http://insertafter.com/en/index.html)


# License
[MIT](https://github.com/nfroidure/module/blob/main/LICENSE)
",
  "dir": "/home/whoami/project/dir",
  "name": "README.md",
}
`);
  });

  test('should build the README.md file with no badge', async () => {
    fs.readFileAsync.mockResolvedValueOnce(
      Buffer.from(PROJECT_README_CONTENTS),
    );
    fs.readFileAsync.mockResolvedValueOnce(Buffer.from(PROJECT_API_CONTENTS));

    const file = await assetsTransformer(
      {
        name: 'README.md',
        dir: '/home/whoami/project/dir',
        data: ASSETS_README_CONTENTS,
      },
      {
        name: 'module',
        description: 'A great module!',
        metapak: {
          configs: ['readme'],
          data: {
            noBadge: true,
          },
        },
        devDependencies: {},
        author: {
          name: 'Nicolas Froidure',
          email: 'nicolas.froidure@insertafter.com',
          url: 'http://insertafter.com/en/index.html',
        },
        contributors: [
          {
            name: 'John Doe',
          },
        ],
        license: 'MIT',
      },
      {
        PROJECT_DIR,
        fs,
        log,
      },
    );
    expect(file).toMatchInlineSnapshot(`
{
  "data": "[//]: # ( )
[//]: # (This file is automatically generated by a \`metapak\`)
[//]: # (module. Do not change it except between the)
[//]: # (\`content:start/end\` flags, your changes would)
[//]: # (be overridden.)
[//]: # ( )
# module
> A great module!



[//]: # (::contents:start)

## Usage

Just require me


[//]: # (::contents:end)


# API
\`\`\`
toto.lol()
\`\`\`

# Authors
- [Nicolas Froidure](http://insertafter.com/en/index.html)


# License
[MIT](https://github.com/nfroidure/module/blob/main/LICENSE)
",
  "dir": "/home/whoami/project/dir",
  "name": "README.md",
}
`);
  });

  test('should build the README.md file with additional badges', async () => {
    fs.readFileAsync.mockResolvedValueOnce(
      Buffer.from(PROJECT_README_CONTENTS),
    );
    fs.readFileAsync.mockResolvedValueOnce(Buffer.from(PROJECT_API_CONTENTS));

    const file = await assetsTransformer(
      {
        name: 'README.md',
        dir: '/home/whoami/project/dir',
        data: ASSETS_README_CONTENTS,
      },
      {
        name: 'module',
        description: 'A great module!',
        metapak: {
          configs: ['readme', 'travis', 'codeclimate'],
          data: {},
        },
        devDependencies: {
          coveralls: '1.0.0',
        },
        author: {
          name: 'Nicolas Froidure',
          email: 'nicolas.froidure@insertafter.com',
          url: 'http://insertafter.com/en/index.html',
        },
        contributors: [
          {
            name: 'John Doe',
          },
        ],
        repository: {
          type: 'git',
          url: 'git+https://github.com/nfroidure/module.git',
        },
        license: 'MIT',
      },
      {
        PROJECT_DIR,
        fs,
        log,
      },
    );
    expect(file).toMatchInlineSnapshot(`
{
  "data": "[//]: # ( )
[//]: # (This file is automatically generated by a \`metapak\`)
[//]: # (module. Do not change it except between the)
[//]: # (\`content:start/end\` flags, your changes would)
[//]: # (be overridden.)
[//]: # ( )
# module
> A great module!

[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/nfroidure/module/blob/main/LICENSE)
[![Build status](https://travis-ci.com/nfroidure/module.svg?branch=main)](https://travis-ci.com/github/nfroidure/module)
[![Coverage Status](https://coveralls.io/repos/github/nfroidure/module/badge.svg?branch=main)](https://coveralls.io/github/nfroidure/module?branch=main)


[//]: # (::contents:start)

## Usage

Just require me


[//]: # (::contents:end)


# API
\`\`\`
toto.lol()
\`\`\`

# Authors
- [Nicolas Froidure](http://insertafter.com/en/index.html)


# License
[MIT](https://github.com/nfroidure/module/blob/main/LICENSE)
",
  "dir": "/home/whoami/project/dir",
  "name": "README.md",
}
`);
  });

  test('should work with scoped packages', async () => {
    fs.readFileAsync.mockResolvedValueOnce(
      Buffer.from(PROJECT_README_CONTENTS),
    );
    fs.readFileAsync.mockResolvedValueOnce(Buffer.from(PROJECT_API_CONTENTS));

    const file = await assetsTransformer(
      {
        name: 'README.md',
        dir: '/home/whoami/project/dir',
        data: ASSETS_README_CONTENTS,
      },
      {
        name: '@scope/module',
        description: 'A great module!',
        metapak: {
          configs: ['travis', 'codeclimate'],
          data: {},
        },
        devDependencies: {
          coveralls: '1.0.0',
        },
        author: {
          name: 'Nicolas Froidure',
          email: 'nicolas.froidure@insertafter.com',
          url: 'http://insertafter.com/en/index.html',
        },
        contributors: [
          {
            name: 'John Doe',
          },
        ],
        repository: {
          type: 'git',
          url: 'git+ssh://git@github.com/nfroidure/module.git',
        },
        license: 'MIT',
      },
      {
        PROJECT_DIR,
        fs,
        log,
      },
    );
    expect(file).toMatchInlineSnapshot(`
{
  "data": "[//]: # ( )
[//]: # (This file is automatically generated by a \`metapak\`)
[//]: # (module. Do not change it except between the)
[//]: # (\`content:start/end\` flags, your changes would)
[//]: # (be overridden.)
[//]: # ( )
# @scope/module
> A great module!

[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/nfroidure/scope-module/blob/main/LICENSE)
[![Build status](https://travis-ci.com/nfroidure/module.svg?branch=main)](https://travis-ci.com/github/nfroidure/module)
[![Coverage Status](https://coveralls.io/repos/github/nfroidure/module/badge.svg?branch=main)](https://coveralls.io/github/nfroidure/module?branch=main)


[//]: # (::contents:start)

## Usage

Just require me


[//]: # (::contents:end)


# API
\`\`\`
toto.lol()
\`\`\`

# Authors
- [Nicolas Froidure](http://insertafter.com/en/index.html)


# License
[MIT](https://github.com/nfroidure/scope-module/blob/main/LICENSE)
",
  "dir": "/home/whoami/project/dir",
  "name": "README.md",
}
`);
  });

  test('should work with scoped packages inside a monorepo', async () => {
    fs.readFileAsync.mockResolvedValueOnce(
      Buffer.from(PROJECT_README_CONTENTS),
    );
    fs.readFileAsync.mockResolvedValueOnce(Buffer.from(PROJECT_API_CONTENTS));

    const file = await assetsTransformer(
      {
        name: 'README.md',
        dir: '/home/whoami/project/dir',
        data: ASSETS_README_CONTENTS,
      },
      {
        name: '@scope/module',
        description: 'A great module!',
        metapak: {
          configs: ['travis', 'codeclimate'],
          data: {
            childPackage: true,
          },
        },
        devDependencies: {
          coveralls: '1.0.0',
        },
        author: {
          name: 'Nicolas Froidure',
          email: 'nicolas.froidure@insertafter.com',
          url: 'http://insertafter.com/en/index.html',
        },
        contributors: [
          {
            name: 'John Doe',
          },
        ],
        repository: {
          type: 'git',
          url: 'git+https://github.com/nfroidure/module.git',
        },
        license: 'MIT',
      },
      {
        PROJECT_DIR,
        fs,
        log,
      },
    );
    expect(file).toMatchInlineSnapshot(`
{
  "data": "[//]: # ( )
[//]: # (This file is automatically generated by a \`metapak\`)
[//]: # (module. Do not change it except between the)
[//]: # (\`content:start/end\` flags, your changes would)
[//]: # (be overridden.)
[//]: # ( )
# @scope/module
> A great module!

[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/nfroidure/scope/blob/main/packages/scope-module/LICENSE)
[![Build status](https://travis-ci.com/nfroidure/module.svg?branch=main)](https://travis-ci.com/github/nfroidure/module)
[![Coverage Status](https://coveralls.io/repos/github/nfroidure/module/badge.svg?branch=main)](https://coveralls.io/github/nfroidure/module?branch=main)


[//]: # (::contents:start)

## Usage

Just require me


[//]: # (::contents:end)


# API
\`\`\`
toto.lol()
\`\`\`

# Authors
- [Nicolas Froidure](http://insertafter.com/en/index.html)


# License
[MIT](https://github.com/nfroidure/scope/blob/main/packages/scope-module/LICENSE)
",
  "dir": "/home/whoami/project/dir",
  "name": "README.md",
}
`);
  });

  test('should let pass other files', async () => {
    expect(
      await assetsTransformer(
        {
          name: 'YOLO',
          data: 'Carpe diem\n',
          dir: '/home/whoami/project/dir',
        },
        {
          name: 'yolo',
          metapak: {
            configs: ['readme'],
            data: {},
          },
        },
        { PROJECT_DIR, fs, log },
      ),
    ).toMatchInlineSnapshot(`
      {
        "data": "Carpe diem
      ",
        "dir": "/home/whoami/project/dir",
        "name": "YOLO",
      }
    `);
  });
});
