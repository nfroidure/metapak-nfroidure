import { describe, beforeEach, jest, test, expect } from '@jest/globals';
import assetsTransformer from './assets.js';
import { constants } from 'fs';
import type { LogService, FSService } from 'metapak';

describe('Karma', () => {
  const fs = {
    readFileAsync: jest.fn<FSService['readFileAsync']>(),
    writeFileAsync: jest.fn<FSService['writeFileAsync']>(),
    mkdirpAsync: jest.fn<FSService['mkdirpAsync']>(),
    accessAsync: jest.fn<FSService['accessAsync']>(),
    readdirAsync: jest.fn<FSService['readdirAsync']>(),
    unlinkAsync: jest.fn<FSService['unlinkAsync']>(),
    constants,
  };
  const PROJECT_DIR = '/lol/';
  const log = jest.fn<LogService>();

  beforeEach(() => {
    fs.readFileAsync.mockReset();
    fs.writeFileAsync.mockReset();
    fs.mkdirpAsync.mockReset();
    fs.accessAsync.mockReset();
    fs.readdirAsync.mockReset();
    fs.unlinkAsync.mockReset();
    log.mockReset();
  });

  describe('Assets transformer', () => {
    test('should fill the manifest', async () => {
      expect(
        await assetsTransformer(
          {
            name: '.travis.yml',
            dir: '/home/whoami/project/dir',
            data: `# This file is automatically generated by a \`metapak\`
# module. Do not change it elsewhere, changes would
# be overridden.

language: node_js
node_js:
  - 8
  - 8.12.0
  - 9
  - 10
`,
          },
          {
            metapak: {
              configs: ['karma'],
              data: {},
            },
          },
          {
            PROJECT_DIR,
            fs,
            log,
          },
        ),
      ).toMatchInlineSnapshot(`
        {
          "data": "# This file is automatically generated by a \`metapak\`
        # module. Do not change it elsewhere, changes would
        # be overridden.

        language: node_js
        node_js:
          - 8
          - 8.12.0
          - 9
          - 10

        before_install:
          - export CHROME_BIN=chromium-browser
        services:
          - xvfb
        ",
          "dir": "/home/whoami/project/dir",
          "name": ".travis.yml",
        }
      `);
    });

    test('should let pass other files', async () => {
      expect(
        await assetsTransformer(
          {
            name: 'YOLO',
            data: 'Carpe diem\n',
            dir: '/home/whoami/project/dir',
          },
          {
            metapak: {
              configs: ['karma'],
              data: {},
            },
          },
          {
            PROJECT_DIR,
            fs,
            log,
          },
        ),
      ).toMatchInlineSnapshot(`
        {
          "data": "Carpe diem
        ",
          "dir": "/home/whoami/project/dir",
          "name": "YOLO",
        }
      `);
    });
  });
});
