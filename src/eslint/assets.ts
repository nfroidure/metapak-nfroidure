import type { PackageAssetsTransformer } from 'metapak';

const VSCODE_ESLINT_PLUGIN = 'dbaeumer.vscode-eslint';
const VSCODE_PRETTIER_PLUGIN = 'esbenp.prettier-vscode';

const transformer: PackageAssetsTransformer<
  { childPackage?: boolean; rootPackage?: boolean; files?: string },
  {
    greenkeeper?: { ignore?: string[] };
  }
> = async (file, packageConf) => {
  const {
    metapak: { data, configs },
  } = packageConf;

  // Set types in ts config
  if ('.vscode/extensions.json' === file.name && !data.childPackage) {
    const contents = JSON.parse(file.data || '{}');

    contents.recommendations = contents.recommendations || [];

    if (!contents.recommendations.includes(VSCODE_ESLINT_PLUGIN)) {
      contents.recommendations.push(VSCODE_ESLINT_PLUGIN);
    }
    if (!contents.recommendations.includes(VSCODE_PRETTIER_PLUGIN)) {
      contents.recommendations.push(VSCODE_PRETTIER_PLUGIN);
    }

    contents.recommendations.sort();

    file.data = JSON.stringify(contents, null, 2);
  }
  if ('.vscode/settings.json' === file.name) {
    if (data.childPackage) {
      file.data = '';
    }
  }
  if ('eslint.config.js' === file.name) {
    if (data.rootPackage) {
      file.data = '';
      return file;
    }
    // Special configuration for TypeScript
    if (configs.includes('typescript') || configs.includes('tsesm')) {
      file.data = `// @ts-check
// This file is automatically generated by a \`metapak\`
// module. Do not change it elsewhere, changes would
// be overridden.

import eslint from '@eslint/js';
import tseslint from 'typescript-eslint';
import eslintConfigPrettier from 'eslint-config-prettier';
import eslintPluginJest from 'eslint-plugin-jest';

export default tseslint.config(
  eslint.configs.recommended,
  ...tseslint.configs.recommended,
  {
    files: ['*.test.ts'],
    ...eslintPluginJest.configs['flat/recommended'],
  },
  eslintConfigPrettier,
  {
    name: 'Project config',
    languageOptions: {
      ecmaVersion: 2018,
      sourceType: 'module',
    },
    ignores: ['*.d.ts'],
  },
);

`;
    }
  }
  return file;
};

export default transformer;
